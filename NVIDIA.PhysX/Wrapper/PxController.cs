//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxController {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;
  public object userData;

  internal PxController(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxController obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static PxController getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxController)) {
          wrapper = new PxController(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxController;
  }

  ~PxController() {
    WrapperCache.remove(swigCPtr.Handle, this);
  }

  public PxControllerCollisionFlag move( PxVec3  disp, float minDist, float elapsedTime, PxControllerFilters filters, PxObstacleContext obstacles) {
    PxControllerCollisionFlag ret = (PxControllerCollisionFlag)NativePINVOKE.PxController_move__SWIG_0(swigCPtr,  disp.swigCPtr , minDist, elapsedTime, PxControllerFilters.getCPtr(filters), PxObstacleContext.getCPtr(obstacles));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxControllerCollisionFlag move( PxVec3  disp, float minDist, float elapsedTime, PxControllerFilters filters) {
    PxControllerCollisionFlag ret = (PxControllerCollisionFlag)NativePINVOKE.PxController_move__SWIG_1(swigCPtr,  disp.swigCPtr , minDist, elapsedTime, PxControllerFilters.getCPtr(filters));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void release() {
    NativePINVOKE.PxController_release(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool setPosition(PxExtendedVec3 position) {
    bool ret = NativePINVOKE.PxController_setPosition(swigCPtr, PxExtendedVec3.getCPtr(position));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxExtendedVec3 getPosition() {
    PxExtendedVec3 ret = PxExtendedVec3.getWrapper(NativePINVOKE.PxController_getPosition(swigCPtr), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setFootPosition(PxExtendedVec3 position) {
    bool ret = NativePINVOKE.PxController_setFootPosition(swigCPtr, PxExtendedVec3.getCPtr(position));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxExtendedVec3 getFootPosition() {
    PxExtendedVec3 ret = PxExtendedVec3.getWrapper(NativePINVOKE.PxController_getFootPosition(swigCPtr), true);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxRigidDynamic getActor() {
    global::System.IntPtr cPtr = NativePINVOKE.PxController_getActor(swigCPtr);
    PxRigidDynamic ret = (cPtr == global::System.IntPtr.Zero) ? null : PxRigidDynamic.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setStepOffset(float offset) {
    NativePINVOKE.PxController_setStepOffset(swigCPtr, offset);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float getStepOffset() {
    float ret = NativePINVOKE.PxController_getStepOffset(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float getContactOffset() {
    float ret = NativePINVOKE.PxController_getContactOffset(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setContactOffset(float offset) {
    NativePINVOKE.PxController_setContactOffset(swigCPtr, offset);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual  PxVec3  getUpDirection() {
        global::System.IntPtr ptr = NativePINVOKE.PxController_getUpDirection(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public virtual void setUpDirection( PxVec3  up) {
    NativePINVOKE.PxController_setUpDirection(swigCPtr,  up.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float getSlopeLimit() {
    float ret = NativePINVOKE.PxController_getSlopeLimit(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setSlopeLimit(float slopeLimit) {
    NativePINVOKE.PxController_setSlopeLimit(swigCPtr, slopeLimit);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void invalidateCache() {
    NativePINVOKE.PxController_invalidateCache(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxScene getScene() {
    global::System.IntPtr cPtr = NativePINVOKE.PxController_getScene(swigCPtr);
    PxScene ret = (cPtr == global::System.IntPtr.Zero) ? null : PxScene.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_void getUserData() {
    global::System.IntPtr cPtr = NativePINVOKE.PxController_getUserData(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setUserData(SWIGTYPE_p_void userData) {
    NativePINVOKE.PxController_setUserData(swigCPtr, SWIGTYPE_p_void.getCPtr(userData));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void resize(float height) {
    NativePINVOKE.PxController_resize(swigCPtr, height);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
