//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxQueryFilterCallback {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxQueryFilterCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxQueryFilterCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxQueryFilterCallback() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxQueryFilterCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual PxQueryHitType preFilter( PxFilterData  filterData, PxShape shape, PxRigidActor actor, PxHitFlag queryFlags) {
    PxQueryHitType ret = (PxQueryHitType)NativePINVOKE.PxQueryFilterCallback_preFilter(swigCPtr,  filterData.swigCPtr , PxShape.getCPtr(shape), PxRigidActor.getCPtr(actor), queryFlags);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxQueryHitType postFilter( PxFilterData  filterData, PxQueryHit hit) {
    PxQueryHitType ret = (PxQueryHitType)NativePINVOKE.PxQueryFilterCallback_postFilter(swigCPtr,  filterData.swigCPtr , PxQueryHit.getCPtr(hit));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("preFilter", swigMethodTypes0))
      swigDelegate0 = new SwigDelegatePxQueryFilterCallback_0(SwigDirectorMethodpreFilter);
    if (SwigDerivedClassHasMethod("postFilter", swigMethodTypes1))
      swigDelegate1 = new SwigDelegatePxQueryFilterCallback_1(SwigDirectorMethodpostFilter);
    NativePINVOKE.PxQueryFilterCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(PxQueryFilterCallback));
    return hasDerivedMethod;
  }

  private int SwigDirectorMethodpreFilter(global::System.IntPtr filterData, global::System.IntPtr shape, global::System.IntPtr actor, global::System.IntPtr queryFlags) {
    return (int)preFilter(new PxFilterData(filterData, false), (shape == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(shape, false), (actor == global::System.IntPtr.Zero) ? null : PxRigidActor.getWrapper(actor, false), (PxHitFlag)queryFlags);
  }

  private int SwigDirectorMethodpostFilter(global::System.IntPtr filterData, global::System.IntPtr hit) {
    return (int)postFilter(new PxFilterData(filterData, false), new PxQueryHit(hit, false));
  }

  public delegate int SwigDelegatePxQueryFilterCallback_0(global::System.IntPtr filterData, global::System.IntPtr shape, global::System.IntPtr actor, global::System.IntPtr queryFlags);
  public delegate int SwigDelegatePxQueryFilterCallback_1(global::System.IntPtr filterData, global::System.IntPtr hit);

  private SwigDelegatePxQueryFilterCallback_0 swigDelegate0;
  private SwigDelegatePxQueryFilterCallback_1 swigDelegate1;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof( PxFilterData ), typeof(PxShape), typeof(PxRigidActor), typeof(SWIGTYPE_p_PxFlagsT_physx__PxHitFlag_unsigned_short_t) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof( PxFilterData ), typeof(PxQueryHit) };
}

}
