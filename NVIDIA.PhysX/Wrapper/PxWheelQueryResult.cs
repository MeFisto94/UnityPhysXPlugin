//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxWheelQueryResult {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxWheelQueryResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxWheelQueryResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxWheelQueryResult() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxWheelQueryResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxWheelQueryResult() : this(NativePINVOKE.new_PxWheelQueryResult(), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxVec3 suspLineStart {
    set {
      NativePINVOKE.PxWheelQueryResult_suspLineStart_set(swigCPtr,  value.swigCPtr );
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
        get { global::System.IntPtr ptr = NativePINVOKE.PxWheelQueryResult_suspLineStart_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
              //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
              PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
              return ret; }
    
  }

  public PxVec3 suspLineDir {
    set {
      NativePINVOKE.PxWheelQueryResult_suspLineDir_set(swigCPtr,  value.swigCPtr );
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
        get { global::System.IntPtr ptr = NativePINVOKE.PxWheelQueryResult_suspLineDir_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
              //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
              PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
              return ret; }
    
  }

  public float suspLineLength {
    set {
      NativePINVOKE.PxWheelQueryResult_suspLineLength_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NativePINVOKE.PxWheelQueryResult_suspLineLength_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isInAir {
    set {
      NativePINVOKE.PxWheelQueryResult_isInAir_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = NativePINVOKE.PxWheelQueryResult_isInAir_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxActor tireContactActor {
    set {
      NativePINVOKE.PxWheelQueryResult_tireContactActor_set(swigCPtr, PxActor.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxWheelQueryResult_tireContactActor_get(swigCPtr);
      PxActor ret = (cPtr == global::System.IntPtr.Zero) ? null : PxActor.getWrapper(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxShape tireContactShape {
    set {
      NativePINVOKE.PxWheelQueryResult_tireContactShape_set(swigCPtr, PxShape.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxWheelQueryResult_tireContactShape_get(swigCPtr);
      PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxMaterial tireSurfaceMaterial {
    set {
      NativePINVOKE.PxWheelQueryResult_tireSurfaceMaterial_set(swigCPtr, PxMaterial.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxWheelQueryResult_tireSurfaceMaterial_get(swigCPtr);
      PxMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : PxMaterial.getWrapper(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint tireSurfaceType {
    set {
      NativePINVOKE.PxWheelQueryResult_tireSurfaceType_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = NativePINVOKE.PxWheelQueryResult_tireSurfaceType_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxVec3 tireContactPoint {
    set {
      NativePINVOKE.PxWheelQueryResult_tireContactPoint_set(swigCPtr,  value.swigCPtr );
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
        get { global::System.IntPtr ptr = NativePINVOKE.PxWheelQueryResult_tireContactPoint_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
              //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
              PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
              return ret; }
    
  }

  public PxVec3 tireContactNormal {
    set {
      NativePINVOKE.PxWheelQueryResult_tireContactNormal_set(swigCPtr,  value.swigCPtr );
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
        get { global::System.IntPtr ptr = NativePINVOKE.PxWheelQueryResult_tireContactNormal_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
              //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
              PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
              return ret; }
    
  }

  public float tireFriction {
    set {
      NativePINVOKE.PxWheelQueryResult_tireFriction_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NativePINVOKE.PxWheelQueryResult_tireFriction_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float suspJounce {
    set {
      NativePINVOKE.PxWheelQueryResult_suspJounce_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NativePINVOKE.PxWheelQueryResult_suspJounce_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float suspSpringForce {
    set {
      NativePINVOKE.PxWheelQueryResult_suspSpringForce_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NativePINVOKE.PxWheelQueryResult_suspSpringForce_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxVec3 tireLongitudinalDir {
    set {
      NativePINVOKE.PxWheelQueryResult_tireLongitudinalDir_set(swigCPtr,  value.swigCPtr );
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
        get { global::System.IntPtr ptr = NativePINVOKE.PxWheelQueryResult_tireLongitudinalDir_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
              //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
              PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
              return ret; }
    
  }

  public PxVec3 tireLateralDir {
    set {
      NativePINVOKE.PxWheelQueryResult_tireLateralDir_set(swigCPtr,  value.swigCPtr );
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
        get { global::System.IntPtr ptr = NativePINVOKE.PxWheelQueryResult_tireLateralDir_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
              //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
              PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
              return ret; }
    
  }

  public float longitudinalSlip {
    set {
      NativePINVOKE.PxWheelQueryResult_longitudinalSlip_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NativePINVOKE.PxWheelQueryResult_longitudinalSlip_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float lateralSlip {
    set {
      NativePINVOKE.PxWheelQueryResult_lateralSlip_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NativePINVOKE.PxWheelQueryResult_lateralSlip_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float steerAngle {
    set {
      NativePINVOKE.PxWheelQueryResult_steerAngle_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NativePINVOKE.PxWheelQueryResult_steerAngle_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxTransform localPose {
    set {
      NativePINVOKE.PxWheelQueryResult_localPose_set(swigCPtr,  value.swigCPtr );
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
        get { global::System.IntPtr ptr = NativePINVOKE.PxWheelQueryResult_localPose_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
              //PxTransform ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxTransform>(ptr);
              PxTransform ret; unsafe { ret = *(PxTransform*)ptr; }
              return ret; }
    
  }

}

}
