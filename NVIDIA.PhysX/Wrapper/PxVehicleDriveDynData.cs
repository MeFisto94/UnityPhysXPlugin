//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxVehicleDriveDynData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxVehicleDriveDynData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxVehicleDriveDynData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxVehicleDriveDynData() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxVehicleDriveDynData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void setToRestState() {
    NativePINVOKE.PxVehicleDriveDynData_setToRestState(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAnalogInput(uint type, float analogVal) {
    NativePINVOKE.PxVehicleDriveDynData_setAnalogInput(swigCPtr, type, analogVal);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getAnalogInput(uint type) {
    float ret = NativePINVOKE.PxVehicleDriveDynData_getAnalogInput(swigCPtr, type);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGearUp(bool digitalVal) {
    NativePINVOKE.PxVehicleDriveDynData_setGearUp(swigCPtr, digitalVal);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGearDown(bool digitalVal) {
    NativePINVOKE.PxVehicleDriveDynData_setGearDown(swigCPtr, digitalVal);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getGearUp() {
    bool ret = NativePINVOKE.PxVehicleDriveDynData_getGearUp(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getGearDown() {
    bool ret = NativePINVOKE.PxVehicleDriveDynData_getGearDown(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setUseAutoGears(bool useAutoGears) {
    NativePINVOKE.PxVehicleDriveDynData_setUseAutoGears(swigCPtr, useAutoGears);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getUseAutoGears() {
    bool ret = NativePINVOKE.PxVehicleDriveDynData_getUseAutoGears(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void toggleAutoGears() {
    NativePINVOKE.PxVehicleDriveDynData_toggleAutoGears(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setCurrentGear(uint currentGear) {
    NativePINVOKE.PxVehicleDriveDynData_setCurrentGear(swigCPtr, currentGear);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getCurrentGear() {
    uint ret = NativePINVOKE.PxVehicleDriveDynData_getCurrentGear(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTargetGear(uint targetGear) {
    NativePINVOKE.PxVehicleDriveDynData_setTargetGear(swigCPtr, targetGear);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getTargetGear() {
    uint ret = NativePINVOKE.PxVehicleDriveDynData_getTargetGear(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void startGearChange(uint targetGear) {
    NativePINVOKE.PxVehicleDriveDynData_startGearChange(swigCPtr, targetGear);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void forceGearChange(uint targetGear) {
    NativePINVOKE.PxVehicleDriveDynData_forceGearChange(swigCPtr, targetGear);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEngineRotationSpeed(float speed) {
    NativePINVOKE.PxVehicleDriveDynData_setEngineRotationSpeed(swigCPtr, speed);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getEngineRotationSpeed() {
    float ret = NativePINVOKE.PxVehicleDriveDynData_getEngineRotationSpeed(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getGearSwitchTime() {
    float ret = NativePINVOKE.PxVehicleDriveDynData_getGearSwitchTime(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getAutoBoxSwitchTime() {
    float ret = NativePINVOKE.PxVehicleDriveDynData_getAutoBoxSwitchTime(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_float mControlAnalogVals {
    set {
      NativePINVOKE.PxVehicleDriveDynData_mControlAnalogVals_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxVehicleDriveDynData_mControlAnalogVals_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool mUseAutoGears {
    set {
      NativePINVOKE.PxVehicleDriveDynData_mUseAutoGears_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = NativePINVOKE.PxVehicleDriveDynData_mUseAutoGears_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool mGearUpPressed {
    set {
      NativePINVOKE.PxVehicleDriveDynData_mGearUpPressed_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = NativePINVOKE.PxVehicleDriveDynData_mGearUpPressed_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool mGearDownPressed {
    set {
      NativePINVOKE.PxVehicleDriveDynData_mGearDownPressed_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = NativePINVOKE.PxVehicleDriveDynData_mGearDownPressed_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint mTargetGear {
    set {
      NativePINVOKE.PxVehicleDriveDynData_mTargetGear_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = NativePINVOKE.PxVehicleDriveDynData_mTargetGear_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float mEnginespeed {
    set {
      NativePINVOKE.PxVehicleDriveDynData_mEnginespeed_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NativePINVOKE.PxVehicleDriveDynData_mEnginespeed_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float mGearSwitchTime {
    set {
      NativePINVOKE.PxVehicleDriveDynData_mGearSwitchTime_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NativePINVOKE.PxVehicleDriveDynData_mGearSwitchTime_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float mAutoBoxSwitchTime {
    set {
      NativePINVOKE.PxVehicleDriveDynData_mAutoBoxSwitchTime_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NativePINVOKE.PxVehicleDriveDynData_mAutoBoxSwitchTime_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static readonly int MAX_NB_ANALOG_INPUTS = NativePINVOKE.PxVehicleDriveDynData_MAX_NB_ANALOG_INPUTS_get();

}

}
