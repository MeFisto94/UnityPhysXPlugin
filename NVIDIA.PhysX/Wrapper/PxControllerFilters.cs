//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxControllerFilters {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxControllerFilters(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxControllerFilters obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxControllerFilters() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxControllerFilters(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxControllerFilters( PxFilterData  filterData, PxQueryFilterCallback cb, PxControllerFilterCallback cctFilterCb) : this(NativePINVOKE.new_PxControllerFilters__SWIG_0( filterData.swigCPtr , PxQueryFilterCallback.getCPtr(cb), PxControllerFilterCallback.getCPtr(cctFilterCb)), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxControllerFilters( PxFilterData  filterData, PxQueryFilterCallback cb) : this(NativePINVOKE.new_PxControllerFilters__SWIG_1( filterData.swigCPtr , PxQueryFilterCallback.getCPtr(cb)), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxControllerFilters( PxFilterData  filterData) : this(NativePINVOKE.new_PxControllerFilters__SWIG_2( filterData.swigCPtr ), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxControllerFilters() : this(NativePINVOKE.new_PxControllerFilters__SWIG_3(), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public  PxFilterData  mFilterData {
    set {
      NativePINVOKE.PxControllerFilters_mFilterData_set(swigCPtr,  value.swigCPtr );
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
        get { global::System.IntPtr ptr = NativePINVOKE.PxControllerFilters_mFilterData_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
              //PxFilterData ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxFilterData>(ptr);
              PxFilterData ret; unsafe { ret = *(PxFilterData*)ptr; }
              return ret; }
    
  }

  public PxQueryFilterCallback mFilterCallback {
    set {
      NativePINVOKE.PxControllerFilters_mFilterCallback_set(swigCPtr, PxQueryFilterCallback.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxControllerFilters_mFilterCallback_get(swigCPtr);
      PxQueryFilterCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxQueryFilterCallback(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxControllerFilterCallback mCCTFilterCallback {
    set {
      NativePINVOKE.PxControllerFilters_mCCTFilterCallback_set(swigCPtr, PxControllerFilterCallback.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxControllerFilters_mCCTFilterCallback_get(swigCPtr);
      PxControllerFilterCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxControllerFilterCallback(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
