//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxVehicleDriveSimData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxVehicleDriveSimData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxVehicleDriveSimData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxVehicleDriveSimData() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxVehicleDriveSimData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxVehicleEngineData getEngineData() {
    PxVehicleEngineData ret = new PxVehicleEngineData(NativePINVOKE.PxVehicleDriveSimData_getEngineData(swigCPtr), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setEngineData(PxVehicleEngineData engine) {
    NativePINVOKE.PxVehicleDriveSimData_setEngineData(swigCPtr, PxVehicleEngineData.getCPtr(engine));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxVehicleGearsData getGearsData() {
    PxVehicleGearsData ret = new PxVehicleGearsData(NativePINVOKE.PxVehicleDriveSimData_getGearsData(swigCPtr), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGearsData(PxVehicleGearsData gears) {
    NativePINVOKE.PxVehicleDriveSimData_setGearsData(swigCPtr, PxVehicleGearsData.getCPtr(gears));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxVehicleClutchData getClutchData() {
    PxVehicleClutchData ret = new PxVehicleClutchData(NativePINVOKE.PxVehicleDriveSimData_getClutchData(swigCPtr), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setClutchData(PxVehicleClutchData clutch) {
    NativePINVOKE.PxVehicleDriveSimData_setClutchData(swigCPtr, PxVehicleClutchData.getCPtr(clutch));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxVehicleAutoBoxData getAutoBoxData() {
    PxVehicleAutoBoxData ret = new PxVehicleAutoBoxData(NativePINVOKE.PxVehicleDriveSimData_getAutoBoxData(swigCPtr), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAutoBoxData(PxVehicleAutoBoxData autobox) {
    NativePINVOKE.PxVehicleDriveSimData_setAutoBoxData(swigCPtr, PxVehicleAutoBoxData.getCPtr(autobox));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
