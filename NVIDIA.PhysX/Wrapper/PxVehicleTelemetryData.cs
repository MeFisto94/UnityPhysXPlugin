//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxVehicleTelemetryData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxVehicleTelemetryData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxVehicleTelemetryData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxVehicleTelemetryData() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static PxVehicleTelemetryData allocate(uint nbWheels) {
    global::System.IntPtr cPtr = NativePINVOKE.PxVehicleTelemetryData_allocate(nbWheels);
    PxVehicleTelemetryData ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxVehicleTelemetryData(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void free() {
    NativePINVOKE.PxVehicleTelemetryData_free(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setup(float graphSizeX, float graphSizeY, float engineGraphPosX, float engineGraphPosY, float[] wheelGraphPosX, float[] wheelGraphPosY,  PxVec3  backGroundColor,  PxVec3  lineColorHigh,  PxVec3  lineColorLow) {
    NativePINVOKE.PxVehicleTelemetryData_setup(swigCPtr, graphSizeX, graphSizeY, engineGraphPosX, engineGraphPosY, wheelGraphPosX, wheelGraphPosY,  backGroundColor.swigCPtr ,  lineColorHigh.swigCPtr ,  lineColorLow.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    NativePINVOKE.PxVehicleTelemetryData_clear(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxVehicleGraph getEngineGraph() {
    PxVehicleGraph ret = new PxVehicleGraph(NativePINVOKE.PxVehicleTelemetryData_getEngineGraph(swigCPtr), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbWheelGraphs() {
    uint ret = NativePINVOKE.PxVehicleTelemetryData_getNbWheelGraphs(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxVehicleGraph getWheelGraph(uint k) {
    PxVehicleGraph ret = new PxVehicleGraph(NativePINVOKE.PxVehicleTelemetryData_getWheelGraph(swigCPtr, k), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxVec3  getTireforceAppPoints() {
        global::System.IntPtr ptr = NativePINVOKE.PxVehicleTelemetryData_getTireforceAppPoints(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public  PxVec3  getSuspforceAppPoints() {
        global::System.IntPtr ptr = NativePINVOKE.PxVehicleTelemetryData_getSuspforceAppPoints(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

}

}
