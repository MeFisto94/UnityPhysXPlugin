//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxVehicleWheelsDynData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxVehicleWheelsDynData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxVehicleWheelsDynData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxVehicleWheelsDynData() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxVehicleWheelsDynData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxVehicleWheelsDynData() : this(NativePINVOKE.new_PxVehicleWheelsDynData(), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setToRestState() {
    NativePINVOKE.PxVehicleWheelsDynData_setToRestState(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTireForceShaderFunction(SWIGTYPE_p_physx__PxVehicleComputeTireForce tireForceShaderFn) {
    NativePINVOKE.PxVehicleWheelsDynData_setTireForceShaderFunction(swigCPtr, SWIGTYPE_p_physx__PxVehicleComputeTireForce.getCPtr(tireForceShaderFn));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTireForceShaderData(uint tireId, SWIGTYPE_p_void tireForceShaderData) {
    NativePINVOKE.PxVehicleWheelsDynData_setTireForceShaderData(swigCPtr, tireId, SWIGTYPE_p_void.getCPtr(tireForceShaderData));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_void getTireForceShaderData(uint tireId) {
    global::System.IntPtr cPtr = NativePINVOKE.PxVehicleWheelsDynData_getTireForceShaderData(swigCPtr, tireId);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setWheelRotationSpeed(uint wheelIdx, float speed) {
    NativePINVOKE.PxVehicleWheelsDynData_setWheelRotationSpeed(swigCPtr, wheelIdx, speed);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getWheelRotationSpeed(uint wheelIdx) {
    float ret = NativePINVOKE.PxVehicleWheelsDynData_getWheelRotationSpeed(swigCPtr, wheelIdx);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setWheelRotationAngle(uint wheelIdx, float angle) {
    NativePINVOKE.PxVehicleWheelsDynData_setWheelRotationAngle(swigCPtr, wheelIdx, angle);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getWheelRotationAngle(uint wheelIdx) {
    float ret = NativePINVOKE.PxVehicleWheelsDynData_getWheelRotationAngle(swigCPtr, wheelIdx);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setUserData(uint tireIdx, SWIGTYPE_p_void userData) {
    NativePINVOKE.PxVehicleWheelsDynData_setUserData(swigCPtr, tireIdx, SWIGTYPE_p_void.getCPtr(userData));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_void getUserData(uint tireIdx) {
    global::System.IntPtr cPtr = NativePINVOKE.PxVehicleWheelsDynData_getUserData(swigCPtr, tireIdx);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void copy(PxVehicleWheelsDynData src, uint srcWheel, uint trgWheel) {
    NativePINVOKE.PxVehicleWheelsDynData_copy(swigCPtr, PxVehicleWheelsDynData.getCPtr(src), srcWheel, trgWheel);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
