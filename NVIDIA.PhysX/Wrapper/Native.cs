//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public class Native {
  public static bool PxInitVehicleSDK(PxPhysics physics, PxSerializationRegistry serializationRegistry) {
    bool ret = NativePINVOKE.PxInitVehicleSDK__SWIG_0(PxPhysics.getCPtr(physics), PxSerializationRegistry.getCPtr(serializationRegistry));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool PxInitVehicleSDK(PxPhysics physics) {
    bool ret = NativePINVOKE.PxInitVehicleSDK__SWIG_1(PxPhysics.getCPtr(physics));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void PxCloseVehicleSDK(PxSerializationRegistry serializationRegistry) {
    NativePINVOKE.PxCloseVehicleSDK__SWIG_0(PxSerializationRegistry.getCPtr(serializationRegistry));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxCloseVehicleSDK() {
    NativePINVOKE.PxCloseVehicleSDK__SWIG_1();
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxVehicleSetBasisVectors( PxVec3  up,  PxVec3  forward) {
    NativePINVOKE.PxVehicleSetBasisVectors( up.swigCPtr ,  forward.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxVehicleSetUpdateMode(PxVehicleUpdateMode vehicleUpdateMode) {
    NativePINVOKE.PxVehicleSetUpdateMode((int)vehicleUpdateMode);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxVehicleComputeSprungMasses(uint numSprungMasses, PxVec3[] sprungMassCoordinates,  PxVec3  centreOfMass, float totalMass, uint gravityDirection, float[] sprungMasses) {
    NativePINVOKE.PxVehicleComputeSprungMasses(numSprungMasses, sprungMassCoordinates,  centreOfMass.swigCPtr , totalMass, gravityDirection, sprungMasses);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxVehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs(PxVehicleKeySmoothingData keySmoothing, SWIGTYPE_p_physx__PxFixedSizeLookupTableT_8_t steerVsForwardSpeedTable, PxVehicleDrive4WRawInputData rawInputData, float timestep, bool isVehicleInAir, PxVehicleDrive4W focusVehicle) {
    NativePINVOKE.PxVehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs(PxVehicleKeySmoothingData.getCPtr(keySmoothing), SWIGTYPE_p_physx__PxFixedSizeLookupTableT_8_t.getCPtr(steerVsForwardSpeedTable), PxVehicleDrive4WRawInputData.getCPtr(rawInputData), timestep, isVehicleInAir, PxVehicleDrive4W.getCPtr(focusVehicle));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxVehicleDrive4WSmoothAnalogRawInputsAndSetAnalogInputs(PxVehiclePadSmoothingData padSmoothing, SWIGTYPE_p_physx__PxFixedSizeLookupTableT_8_t steerVsForwardSpeedTable, PxVehicleDrive4WRawInputData rawInputData, float timestep, bool isVehicleInAir, PxVehicleDrive4W focusVehicle) {
    NativePINVOKE.PxVehicleDrive4WSmoothAnalogRawInputsAndSetAnalogInputs(PxVehiclePadSmoothingData.getCPtr(padSmoothing), SWIGTYPE_p_physx__PxFixedSizeLookupTableT_8_t.getCPtr(steerVsForwardSpeedTable), PxVehicleDrive4WRawInputData.getCPtr(rawInputData), timestep, isVehicleInAir, PxVehicleDrive4W.getCPtr(focusVehicle));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxVehicleSuspensionRaycasts(PxBatchQuery batchQuery, uint nbVehicles, PxVehicleWheels[] vehicles, uint nbSceneQueryResults, System.Runtime.InteropServices.HandleRef sceneQueryResults, bool[] vehiclesToRaycast) {
    NativePINVOKE.PxVehicleSuspensionRaycasts__SWIG_0(PxBatchQuery.getCPtr(batchQuery), nbVehicles, global::System.Array.ConvertAll(vehicles, x => PxVehicleWheels.getCPtr(x).Handle /* Mono Bug Workaround */), nbSceneQueryResults, sceneQueryResults, vehiclesToRaycast);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxVehicleSuspensionRaycasts(PxBatchQuery batchQuery, uint nbVehicles, PxVehicleWheels[] vehicles, uint nbSceneQueryResults, System.Runtime.InteropServices.HandleRef sceneQueryResults) {
    NativePINVOKE.PxVehicleSuspensionRaycasts__SWIG_1(PxBatchQuery.getCPtr(batchQuery), nbVehicles, global::System.Array.ConvertAll(vehicles, x => PxVehicleWheels.getCPtr(x).Handle /* Mono Bug Workaround */), nbSceneQueryResults, sceneQueryResults);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxVehicleUpdates(float timestep,  PxVec3  gravity, PxVehicleDrivableSurfaceToTireFrictionPairs vehicleDrivableSurfaceToTireFrictionPairs, uint nbVehicles, PxVehicleWheels[] vehicles, System.Runtime.InteropServices.HandleRef vehicleWheelQueryResults, PxVehicleConcurrentUpdateData[] vehicleConcurrentUpdates) {
    NativePINVOKE.PxVehicleUpdates__SWIG_0(timestep,  gravity.swigCPtr , PxVehicleDrivableSurfaceToTireFrictionPairs.getCPtr(vehicleDrivableSurfaceToTireFrictionPairs), nbVehicles, global::System.Array.ConvertAll(vehicles, x => PxVehicleWheels.getCPtr(x).Handle /* Mono Bug Workaround */), vehicleWheelQueryResults, vehicleConcurrentUpdates);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxVehicleUpdates(float timestep,  PxVec3  gravity, PxVehicleDrivableSurfaceToTireFrictionPairs vehicleDrivableSurfaceToTireFrictionPairs, uint nbVehicles, PxVehicleWheels[] vehicles, System.Runtime.InteropServices.HandleRef vehicleWheelQueryResults) {
    NativePINVOKE.PxVehicleUpdates__SWIG_1(timestep,  gravity.swigCPtr , PxVehicleDrivableSurfaceToTireFrictionPairs.getCPtr(vehicleDrivableSurfaceToTireFrictionPairs), nbVehicles, global::System.Array.ConvertAll(vehicles, x => PxVehicleWheels.getCPtr(x).Handle /* Mono Bug Workaround */), vehicleWheelQueryResults);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly int PX_PHYSICS_VERSION_MAJOR = NativePINVOKE.PX_PHYSICS_VERSION_MAJOR_get();
  public static readonly int PX_PHYSICS_VERSION_MINOR = NativePINVOKE.PX_PHYSICS_VERSION_MINOR_get();
  public static readonly int PX_PHYSICS_VERSION_BUGFIX = NativePINVOKE.PX_PHYSICS_VERSION_BUGFIX_get();
  public static readonly int PX_PHYSICS_VERSION = NativePINVOKE.PX_PHYSICS_VERSION_get();
}

}
