//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxBatchQueryMemory {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxBatchQueryMemory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxBatchQueryMemory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxBatchQueryMemory() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxBatchQueryMemory(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxRaycastQueryResult userRaycastResultBuffer {
    set {
      NativePINVOKE.PxBatchQueryMemory_userRaycastResultBuffer_set(swigCPtr, PxRaycastQueryResult.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxBatchQueryMemory_userRaycastResultBuffer_get(swigCPtr);
      PxRaycastQueryResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxRaycastQueryResult(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxRaycastHit userRaycastTouchBuffer {
    set {
      NativePINVOKE.PxBatchQueryMemory_userRaycastTouchBuffer_set(swigCPtr, PxRaycastHit.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxBatchQueryMemory_userRaycastTouchBuffer_get(swigCPtr);
      PxRaycastHit ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxRaycastHit(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxSweepQueryResult userSweepResultBuffer {
    set {
      NativePINVOKE.PxBatchQueryMemory_userSweepResultBuffer_set(swigCPtr, PxSweepQueryResult.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxBatchQueryMemory_userSweepResultBuffer_get(swigCPtr);
      PxSweepQueryResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxSweepQueryResult(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxSweepHit userSweepTouchBuffer {
    set {
      NativePINVOKE.PxBatchQueryMemory_userSweepTouchBuffer_set(swigCPtr, PxSweepHit.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxBatchQueryMemory_userSweepTouchBuffer_get(swigCPtr);
      PxSweepHit ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxSweepHit(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxOverlapQueryResult userOverlapResultBuffer {
    set {
      NativePINVOKE.PxBatchQueryMemory_userOverlapResultBuffer_set(swigCPtr, PxOverlapQueryResult.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxBatchQueryMemory_userOverlapResultBuffer_get(swigCPtr);
      PxOverlapQueryResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxOverlapQueryResult(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxOverlapHit userOverlapTouchBuffer {
    set {
      NativePINVOKE.PxBatchQueryMemory_userOverlapTouchBuffer_set(swigCPtr, PxOverlapHit.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxBatchQueryMemory_userOverlapTouchBuffer_get(swigCPtr);
      PxOverlapHit ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxOverlapHit(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint raycastTouchBufferSize {
    set {
      NativePINVOKE.PxBatchQueryMemory_raycastTouchBufferSize_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = NativePINVOKE.PxBatchQueryMemory_raycastTouchBufferSize_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint sweepTouchBufferSize {
    set {
      NativePINVOKE.PxBatchQueryMemory_sweepTouchBufferSize_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = NativePINVOKE.PxBatchQueryMemory_sweepTouchBufferSize_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint overlapTouchBufferSize {
    set {
      NativePINVOKE.PxBatchQueryMemory_overlapTouchBufferSize_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = NativePINVOKE.PxBatchQueryMemory_overlapTouchBufferSize_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint getMaxRaycastsPerExecute() {
    uint ret = NativePINVOKE.PxBatchQueryMemory_getMaxRaycastsPerExecute(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getMaxSweepsPerExecute() {
    uint ret = NativePINVOKE.PxBatchQueryMemory_getMaxSweepsPerExecute(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getMaxOverlapsPerExecute() {
    uint ret = NativePINVOKE.PxBatchQueryMemory_getMaxOverlapsPerExecute(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxBatchQueryMemory(uint raycastResultBufferSize_, uint sweepResultBufferSize_, uint overlapResultBufferSize_) : this(NativePINVOKE.new_PxBatchQueryMemory(raycastResultBufferSize_, sweepResultBufferSize_, overlapResultBufferSize_), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
