//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxVehicleGraph {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxVehicleGraph(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxVehicleGraph obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxVehicleGraph() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void setup(PxVehicleGraphDesc desc, PxVehicleGraphType graphType) {
    NativePINVOKE.PxVehicleGraph_setup(swigCPtr, PxVehicleGraphDesc.getCPtr(desc), (int)graphType);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearRecordedChannelData() {
    NativePINVOKE.PxVehicleGraph_clearRecordedChannelData(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public  PxVec3  getBackgroundColor() {
        global::System.IntPtr ptr = NativePINVOKE.PxVehicleGraph_getBackgroundColor(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public float getBackgroundAlpha() {
    float ret = NativePINVOKE.PxVehicleGraph_getBackgroundAlpha(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getBackgroundCoords(SWIGTYPE_p_float xMin, SWIGTYPE_p_float yMin, SWIGTYPE_p_float xMax, SWIGTYPE_p_float yMax) {
    NativePINVOKE.PxVehicleGraph_getBackgroundCoords(swigCPtr, SWIGTYPE_p_float.getCPtr(xMin), SWIGTYPE_p_float.getCPtr(yMin), SWIGTYPE_p_float.getCPtr(xMax), SWIGTYPE_p_float.getCPtr(yMax));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeGraphChannel(uint channel, SWIGTYPE_p_float xy,  ref PxVec3  colors, string title) {
    NativePINVOKE.PxVehicleGraph_computeGraphChannel(swigCPtr, channel, SWIGTYPE_p_float.getCPtr(xy),  colors.swigCPtr , title);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getLatestValue(uint channel) {
    float ret = NativePINVOKE.PxVehicleGraph_getLatestValue(swigCPtr, channel);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getRawData(uint channel, float[] values) {
    NativePINVOKE.PxVehicleGraph_getRawData(swigCPtr, channel, values);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
