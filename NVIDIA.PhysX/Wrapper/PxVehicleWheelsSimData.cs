//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxVehicleWheelsSimData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;
  public object userData;

  internal PxVehicleWheelsSimData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxVehicleWheelsSimData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static PxVehicleWheelsSimData getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxVehicleWheelsSimData)) {
          wrapper = new PxVehicleWheelsSimData(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxVehicleWheelsSimData;
  }

  ~PxVehicleWheelsSimData() {
    WrapperCache.remove(swigCPtr.Handle, this);
  }

  public static PxVehicleWheelsSimData allocate(uint nbWheels) {
    global::System.IntPtr cPtr = NativePINVOKE.PxVehicleWheelsSimData_allocate(nbWheels);
    PxVehicleWheelsSimData ret = (cPtr == global::System.IntPtr.Zero) ? null : PxVehicleWheelsSimData.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setChassisMass(float chassisMass) {
    NativePINVOKE.PxVehicleWheelsSimData_setChassisMass(swigCPtr, chassisMass);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void free() {
    NativePINVOKE.PxVehicleWheelsSimData_free(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxVehicleWheelsSimData __assign(PxVehicleWheelsSimData src) {
    PxVehicleWheelsSimData ret = PxVehicleWheelsSimData.getWrapper(NativePINVOKE.PxVehicleWheelsSimData___assign(swigCPtr, PxVehicleWheelsSimData.getCPtr(src)), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void copy(PxVehicleWheelsSimData src, uint srcWheel, uint trgWheel) {
    NativePINVOKE.PxVehicleWheelsSimData_copy(swigCPtr, PxVehicleWheelsSimData.getCPtr(src), srcWheel, trgWheel);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNbWheels() {
    uint ret = NativePINVOKE.PxVehicleWheelsSimData_getNbWheels(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxVehicleSuspensionData getSuspensionData(uint id) {
    PxVehicleSuspensionData ret = new PxVehicleSuspensionData(NativePINVOKE.PxVehicleWheelsSimData_getSuspensionData(swigCPtr, id), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxVehicleWheelData getWheelData(uint id) {
    PxVehicleWheelData ret = new PxVehicleWheelData(NativePINVOKE.PxVehicleWheelsSimData_getWheelData(swigCPtr, id), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxVehicleTireData getTireData(uint id) {
    PxVehicleTireData ret = new PxVehicleTireData(NativePINVOKE.PxVehicleWheelsSimData_getTireData(swigCPtr, id), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxVec3  getSuspTravelDirection(uint id) {
        global::System.IntPtr ptr = NativePINVOKE.PxVehicleWheelsSimData_getSuspTravelDirection(swigCPtr, id);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public  PxVec3  getSuspForceAppPointOffset(uint id) {
        global::System.IntPtr ptr = NativePINVOKE.PxVehicleWheelsSimData_getSuspForceAppPointOffset(swigCPtr, id);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public  PxVec3  getTireForceAppPointOffset(uint id) {
        global::System.IntPtr ptr = NativePINVOKE.PxVehicleWheelsSimData_getTireForceAppPointOffset(swigCPtr, id);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public  PxVec3  getWheelCentreOffset(uint id) {
        global::System.IntPtr ptr = NativePINVOKE.PxVehicleWheelsSimData_getWheelCentreOffset(swigCPtr, id);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public int getWheelShapeMapping(uint wheelId) {
    int ret = NativePINVOKE.PxVehicleWheelsSimData_getWheelShapeMapping(swigCPtr, wheelId);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxFilterData  getSceneQueryFilterData(uint suspId) {
        global::System.IntPtr ptr = NativePINVOKE.PxVehicleWheelsSimData_getSceneQueryFilterData(swigCPtr, suspId);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxFilterData ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxFilterData>(ptr);
        PxFilterData ret; unsafe { ret = *(PxFilterData*)ptr; }
        return ret;
    }

  public PxVehicleAntiRollBarData getAntiRollBarData(uint antiRollId) {
    PxVehicleAntiRollBarData ret = new PxVehicleAntiRollBarData(NativePINVOKE.PxVehicleWheelsSimData_getAntiRollBarData(swigCPtr, antiRollId), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSuspensionData(uint id, PxVehicleSuspensionData susp) {
    NativePINVOKE.PxVehicleWheelsSimData_setSuspensionData(swigCPtr, id, PxVehicleSuspensionData.getCPtr(susp));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setWheelData(uint id, PxVehicleWheelData wheel) {
    NativePINVOKE.PxVehicleWheelsSimData_setWheelData(swigCPtr, id, PxVehicleWheelData.getCPtr(wheel));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTireData(uint id, PxVehicleTireData tire) {
    NativePINVOKE.PxVehicleWheelsSimData_setTireData(swigCPtr, id, PxVehicleTireData.getCPtr(tire));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSuspTravelDirection(uint id,  PxVec3  dir) {
    NativePINVOKE.PxVehicleWheelsSimData_setSuspTravelDirection(swigCPtr, id,  dir.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSuspForceAppPointOffset(uint id,  PxVec3  offset) {
    NativePINVOKE.PxVehicleWheelsSimData_setSuspForceAppPointOffset(swigCPtr, id,  offset.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTireForceAppPointOffset(uint id,  PxVec3  offset) {
    NativePINVOKE.PxVehicleWheelsSimData_setTireForceAppPointOffset(swigCPtr, id,  offset.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setWheelCentreOffset(uint id,  PxVec3  offset) {
    NativePINVOKE.PxVehicleWheelsSimData_setWheelCentreOffset(swigCPtr, id,  offset.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setWheelShapeMapping(uint wheelId, int shapeId) {
    NativePINVOKE.PxVehicleWheelsSimData_setWheelShapeMapping(swigCPtr, wheelId, shapeId);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSceneQueryFilterData(uint suspId,  PxFilterData  sqFilterData) {
    NativePINVOKE.PxVehicleWheelsSimData_setSceneQueryFilterData(swigCPtr, suspId,  sqFilterData.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTireLoadFilterData(PxVehicleTireLoadFilterData tireLoadFilter) {
    NativePINVOKE.PxVehicleWheelsSimData_setTireLoadFilterData(swigCPtr, PxVehicleTireLoadFilterData.getCPtr(tireLoadFilter));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint addAntiRollBarData(PxVehicleAntiRollBarData antiRoll) {
    uint ret = NativePINVOKE.PxVehicleWheelsSimData_addAntiRollBarData(swigCPtr, PxVehicleAntiRollBarData.getCPtr(antiRoll));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void disableWheel(uint wheel) {
    NativePINVOKE.PxVehicleWheelsSimData_disableWheel(swigCPtr, wheel);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void enableWheel(uint wheel) {
    NativePINVOKE.PxVehicleWheelsSimData_enableWheel(swigCPtr, wheel);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getIsWheelDisabled(uint wheel) {
    bool ret = NativePINVOKE.PxVehicleWheelsSimData_getIsWheelDisabled(swigCPtr, wheel);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSubStepCount(float thresholdLongitudinalSpeed, uint lowForwardSpeedSubStepCount, uint highForwardSpeedSubStepCount) {
    NativePINVOKE.PxVehicleWheelsSimData_setSubStepCount(swigCPtr, thresholdLongitudinalSpeed, lowForwardSpeedSubStepCount, highForwardSpeedSubStepCount);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMinLongSlipDenominator(float minLongSlipDenominator) {
    NativePINVOKE.PxVehicleWheelsSimData_setMinLongSlipDenominator(swigCPtr, minLongSlipDenominator);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
