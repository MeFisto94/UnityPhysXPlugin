//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxControllerManager {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxControllerManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxControllerManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxControllerManager() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void release() {
    NativePINVOKE.PxControllerManager_release(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxScene getScene() {
    PxScene ret = PxScene.getWrapper(NativePINVOKE.PxControllerManager_getScene(swigCPtr), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint getNbControllers() {
    uint ret = NativePINVOKE.PxControllerManager_getNbControllers(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxController getController(uint index) {
    global::System.IntPtr cPtr = NativePINVOKE.PxControllerManager_getController(swigCPtr, index);
    PxController ret = (cPtr == global::System.IntPtr.Zero) ? null : PxController.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxController createController(PxControllerDesc desc) {
    global::System.IntPtr cPtr = NativePINVOKE.PxControllerManager_createController(swigCPtr, PxControllerDesc.getCPtr(desc));
    PxController ret = (cPtr == global::System.IntPtr.Zero) ? null : PxController.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void purgeControllers() {
    NativePINVOKE.PxControllerManager_purgeControllers(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual uint getNbObstacleContexts() {
    uint ret = NativePINVOKE.PxControllerManager_getNbObstacleContexts(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxObstacleContext getObstacleContext(uint index) {
    global::System.IntPtr cPtr = NativePINVOKE.PxControllerManager_getObstacleContext(swigCPtr, index);
    PxObstacleContext ret = (cPtr == global::System.IntPtr.Zero) ? null : PxObstacleContext.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxObstacleContext createObstacleContext() {
    global::System.IntPtr cPtr = NativePINVOKE.PxControllerManager_createObstacleContext(swigCPtr);
    PxObstacleContext ret = (cPtr == global::System.IntPtr.Zero) ? null : PxObstacleContext.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void computeInteractions(float elapsedTime, PxControllerFilterCallback cctFilterCb) {
    NativePINVOKE.PxControllerManager_computeInteractions__SWIG_0(swigCPtr, elapsedTime, PxControllerFilterCallback.getCPtr(cctFilterCb));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void computeInteractions(float elapsedTime) {
    NativePINVOKE.PxControllerManager_computeInteractions__SWIG_1(swigCPtr, elapsedTime);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setTessellation(bool flag, float maxEdgeLength) {
    NativePINVOKE.PxControllerManager_setTessellation(swigCPtr, flag, maxEdgeLength);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setOverlapRecoveryModule(bool flag) {
    NativePINVOKE.PxControllerManager_setOverlapRecoveryModule(swigCPtr, flag);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setPreciseSweeps(bool flag) {
    NativePINVOKE.PxControllerManager_setPreciseSweeps(swigCPtr, flag);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setPreventVerticalSlidingAgainstCeiling(bool flag) {
    NativePINVOKE.PxControllerManager_setPreventVerticalSlidingAgainstCeiling(swigCPtr, flag);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void shiftOrigin( PxVec3  shift) {
    NativePINVOKE.PxControllerManager_shiftOrigin(swigCPtr,  shift.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
