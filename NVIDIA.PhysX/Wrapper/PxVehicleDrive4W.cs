//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxVehicleDrive4W : PxVehicleDrive {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxVehicleDrive4W(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxVehicleDrive4W_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxVehicleDrive4W obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxVehicleDrive4W getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxVehicleDrive4W)) {
          wrapper = new PxVehicleDrive4W(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxVehicleDrive4W;
  }

  public static PxVehicleDrive4W allocate(uint nbWheels) {
    global::System.IntPtr cPtr = NativePINVOKE.PxVehicleDrive4W_allocate(nbWheels);
    PxVehicleDrive4W ret = (cPtr == global::System.IntPtr.Zero) ? null : PxVehicleDrive4W.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void free() {
    NativePINVOKE.PxVehicleDrive4W_free(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setup(PxPhysics physics, PxRigidDynamic vehActor, PxVehicleWheelsSimData wheelsData, PxVehicleDriveSimData4W driveData, uint nbNonDrivenWheels) {
    NativePINVOKE.PxVehicleDrive4W_setup(swigCPtr, PxPhysics.getCPtr(physics), PxRigidDynamic.getCPtr(vehActor), PxVehicleWheelsSimData.getCPtr(wheelsData), PxVehicleDriveSimData4W.getCPtr(driveData), nbNonDrivenWheels);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static PxVehicleDrive4W create(PxPhysics physics, PxRigidDynamic vehActor, PxVehicleWheelsSimData wheelsData, PxVehicleDriveSimData4W driveData, uint nbNonDrivenWheels) {
    global::System.IntPtr cPtr = NativePINVOKE.PxVehicleDrive4W_create(PxPhysics.getCPtr(physics), PxRigidDynamic.getCPtr(vehActor), PxVehicleWheelsSimData.getCPtr(wheelsData), PxVehicleDriveSimData4W.getCPtr(driveData), nbNonDrivenWheels);
    PxVehicleDrive4W ret = (cPtr == global::System.IntPtr.Zero) ? null : PxVehicleDrive4W.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setToRestState() {
    NativePINVOKE.PxVehicleDrive4W_setToRestState(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxVehicleDriveSimData4W mDriveSimData {
    set {
      NativePINVOKE.PxVehicleDrive4W_mDriveSimData_set(swigCPtr, PxVehicleDriveSimData4W.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxVehicleDrive4W_mDriveSimData_get(swigCPtr);
      PxVehicleDriveSimData4W ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxVehicleDriveSimData4W(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
