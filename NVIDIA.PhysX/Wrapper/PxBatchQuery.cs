//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxBatchQuery {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxBatchQuery(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxBatchQuery obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxBatchQuery() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void execute() {
    NativePINVOKE.PxBatchQuery_execute(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_void getFilterShaderData() {
    global::System.IntPtr cPtr = NativePINVOKE.PxBatchQuery_getFilterShaderData(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint getFilterShaderDataSize() {
    uint ret = NativePINVOKE.PxBatchQuery_getFilterShaderDataSize(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void release() {
    NativePINVOKE.PxBatchQuery_release(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void overlap(PxGeometry geometry,  PxTransform  pose, ushort maxTouchHits, PxQueryFilterData filterData, SWIGTYPE_p_void userData, PxQueryCache cache) {
    NativePINVOKE.PxBatchQuery_overlap__SWIG_0(swigCPtr, PxGeometry.getCPtr(geometry),  pose.swigCPtr , maxTouchHits, PxQueryFilterData.getCPtr(filterData), SWIGTYPE_p_void.getCPtr(userData), PxQueryCache.getCPtr(cache));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void overlap(PxGeometry geometry,  PxTransform  pose, ushort maxTouchHits, PxQueryFilterData filterData, SWIGTYPE_p_void userData) {
    NativePINVOKE.PxBatchQuery_overlap__SWIG_1(swigCPtr, PxGeometry.getCPtr(geometry),  pose.swigCPtr , maxTouchHits, PxQueryFilterData.getCPtr(filterData), SWIGTYPE_p_void.getCPtr(userData));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void overlap(PxGeometry geometry,  PxTransform  pose, ushort maxTouchHits, PxQueryFilterData filterData) {
    NativePINVOKE.PxBatchQuery_overlap__SWIG_2(swigCPtr, PxGeometry.getCPtr(geometry),  pose.swigCPtr , maxTouchHits, PxQueryFilterData.getCPtr(filterData));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void overlap(PxGeometry geometry,  PxTransform  pose, ushort maxTouchHits) {
    NativePINVOKE.PxBatchQuery_overlap__SWIG_3(swigCPtr, PxGeometry.getCPtr(geometry),  pose.swigCPtr , maxTouchHits);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void overlap(PxGeometry geometry,  PxTransform  pose) {
    NativePINVOKE.PxBatchQuery_overlap__SWIG_4(swigCPtr, PxGeometry.getCPtr(geometry),  pose.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
