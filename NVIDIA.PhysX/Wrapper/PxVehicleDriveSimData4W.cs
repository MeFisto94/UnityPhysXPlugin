//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxVehicleDriveSimData4W : PxVehicleDriveSimData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxVehicleDriveSimData4W(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxVehicleDriveSimData4W_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxVehicleDriveSimData4W obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxVehicleDriveSimData4W(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.destroy();
    }
  }

  public PxVehicleDriveSimData4W() : this(NativePINVOKE.new_PxVehicleDriveSimData4W(), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxVehicleDifferential4WData getDiffData() {
    PxVehicleDifferential4WData ret = new PxVehicleDifferential4WData(NativePINVOKE.PxVehicleDriveSimData4W_getDiffData(swigCPtr), true);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxVehicleAckermannGeometryData getAckermannGeometryData() {
    PxVehicleAckermannGeometryData ret = new PxVehicleAckermannGeometryData(NativePINVOKE.PxVehicleDriveSimData4W_getAckermannGeometryData(swigCPtr), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDiffData(PxVehicleDifferential4WData diff) {
    NativePINVOKE.PxVehicleDriveSimData4W_setDiffData(swigCPtr, PxVehicleDifferential4WData.getCPtr(diff));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAckermannGeometryData(PxVehicleAckermannGeometryData ackermannData) {
    NativePINVOKE.PxVehicleDriveSimData4W_setAckermannGeometryData(swigCPtr, PxVehicleAckermannGeometryData.getCPtr(ackermannData));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
