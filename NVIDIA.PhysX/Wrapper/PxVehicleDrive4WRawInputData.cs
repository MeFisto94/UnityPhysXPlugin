//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxVehicleDrive4WRawInputData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxVehicleDrive4WRawInputData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxVehicleDrive4WRawInputData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxVehicleDrive4WRawInputData() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxVehicleDrive4WRawInputData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxVehicleDrive4WRawInputData() : this(NativePINVOKE.new_PxVehicleDrive4WRawInputData(), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDigitalAccel(bool accelKeyPressed) {
    NativePINVOKE.PxVehicleDrive4WRawInputData_setDigitalAccel(swigCPtr, accelKeyPressed);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDigitalBrake(bool brakeKeyPressed) {
    NativePINVOKE.PxVehicleDrive4WRawInputData_setDigitalBrake(swigCPtr, brakeKeyPressed);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDigitalHandbrake(bool handbrakeKeyPressed) {
    NativePINVOKE.PxVehicleDrive4WRawInputData_setDigitalHandbrake(swigCPtr, handbrakeKeyPressed);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDigitalSteerLeft(bool steerLeftKeyPressed) {
    NativePINVOKE.PxVehicleDrive4WRawInputData_setDigitalSteerLeft(swigCPtr, steerLeftKeyPressed);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDigitalSteerRight(bool steerRightKeyPressed) {
    NativePINVOKE.PxVehicleDrive4WRawInputData_setDigitalSteerRight(swigCPtr, steerRightKeyPressed);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getDigitalAccel() {
    bool ret = NativePINVOKE.PxVehicleDrive4WRawInputData_getDigitalAccel(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getDigitalBrake() {
    bool ret = NativePINVOKE.PxVehicleDrive4WRawInputData_getDigitalBrake(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getDigitalHandbrake() {
    bool ret = NativePINVOKE.PxVehicleDrive4WRawInputData_getDigitalHandbrake(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getDigitalSteerLeft() {
    bool ret = NativePINVOKE.PxVehicleDrive4WRawInputData_getDigitalSteerLeft(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getDigitalSteerRight() {
    bool ret = NativePINVOKE.PxVehicleDrive4WRawInputData_getDigitalSteerRight(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAnalogAccel(float accel) {
    NativePINVOKE.PxVehicleDrive4WRawInputData_setAnalogAccel(swigCPtr, accel);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAnalogBrake(float brake) {
    NativePINVOKE.PxVehicleDrive4WRawInputData_setAnalogBrake(swigCPtr, brake);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAnalogHandbrake(float handbrake) {
    NativePINVOKE.PxVehicleDrive4WRawInputData_setAnalogHandbrake(swigCPtr, handbrake);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAnalogSteer(float steer) {
    NativePINVOKE.PxVehicleDrive4WRawInputData_setAnalogSteer(swigCPtr, steer);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getAnalogAccel() {
    float ret = NativePINVOKE.PxVehicleDrive4WRawInputData_getAnalogAccel(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getAnalogBrake() {
    float ret = NativePINVOKE.PxVehicleDrive4WRawInputData_getAnalogBrake(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getAnalogHandbrake() {
    float ret = NativePINVOKE.PxVehicleDrive4WRawInputData_getAnalogHandbrake(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getAnalogSteer() {
    float ret = NativePINVOKE.PxVehicleDrive4WRawInputData_getAnalogSteer(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGearUp(bool gearUpKeyPressed) {
    NativePINVOKE.PxVehicleDrive4WRawInputData_setGearUp(swigCPtr, gearUpKeyPressed);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGearDown(bool gearDownKeyPressed) {
    NativePINVOKE.PxVehicleDrive4WRawInputData_setGearDown(swigCPtr, gearDownKeyPressed);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getGearUp() {
    bool ret = NativePINVOKE.PxVehicleDrive4WRawInputData_getGearUp(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getGearDown() {
    bool ret = NativePINVOKE.PxVehicleDrive4WRawInputData_getGearDown(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
