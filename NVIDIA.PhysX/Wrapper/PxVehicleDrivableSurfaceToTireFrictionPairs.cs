//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxVehicleDrivableSurfaceToTireFrictionPairs {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxVehicleDrivableSurfaceToTireFrictionPairs(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxVehicleDrivableSurfaceToTireFrictionPairs obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxVehicleDrivableSurfaceToTireFrictionPairs() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static PxVehicleDrivableSurfaceToTireFrictionPairs allocate(uint maxNbTireTypes, uint maxNbSurfaceTypes) {
    global::System.IntPtr cPtr = NativePINVOKE.PxVehicleDrivableSurfaceToTireFrictionPairs_allocate(maxNbTireTypes, maxNbSurfaceTypes);
    PxVehicleDrivableSurfaceToTireFrictionPairs ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxVehicleDrivableSurfaceToTireFrictionPairs(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setup(uint nbTireTypes, uint nbSurfaceTypes, PxMaterial[] drivableSurfaceMaterials, PxVehicleDrivableSurfaceType[] drivableSurfaceTypes) {
    NativePINVOKE.PxVehicleDrivableSurfaceToTireFrictionPairs_setup(swigCPtr, nbTireTypes, nbSurfaceTypes, global::System.Array.ConvertAll(drivableSurfaceMaterials, x => PxMaterial.getCPtr(x).Handle /* Mono Bug Workaround */), drivableSurfaceTypes);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void release() {
    NativePINVOKE.PxVehicleDrivableSurfaceToTireFrictionPairs_release(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTypePairFriction(uint surfaceType, uint tireType, float value) {
    NativePINVOKE.PxVehicleDrivableSurfaceToTireFrictionPairs_setTypePairFriction(swigCPtr, surfaceType, tireType, value);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTypePairFriction(uint surfaceType, uint tireType) {
    float ret = NativePINVOKE.PxVehicleDrivableSurfaceToTireFrictionPairs_getTypePairFriction(swigCPtr, surfaceType, tireType);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getMaxNbSurfaceTypes() {
    uint ret = NativePINVOKE.PxVehicleDrivableSurfaceToTireFrictionPairs_getMaxNbSurfaceTypes(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getMaxNbTireTypes() {
    uint ret = NativePINVOKE.PxVehicleDrivableSurfaceToTireFrictionPairs_getMaxNbTireTypes(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int MAX_NB_SURFACE_TYPES = NativePINVOKE.PxVehicleDrivableSurfaceToTireFrictionPairs_MAX_NB_SURFACE_TYPES_get();

}

}
