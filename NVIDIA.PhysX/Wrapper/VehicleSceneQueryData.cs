//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class VehicleSceneQueryData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VehicleSceneQueryData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VehicleSceneQueryData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VehicleSceneQueryData() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_VehicleSceneQueryData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public VehicleSceneQueryData() : this(NativePINVOKE.new_VehicleSceneQueryData(), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static VehicleSceneQueryData allocate(uint maxNumVehicles, uint maxNumWheelsPerVehicle, uint maxNumHitPointsPerWheel, uint numVehiclesInBatch, NativePINVOKE.PxBatchQueryPreFilterShaderDelegate preFilterShader, NativePINVOKE.PxBatchQueryPostFilterShaderDelegate postFilterShader, PxAllocatorCallback allocator) {
    global::System.IntPtr cPtr = NativePINVOKE.VehicleSceneQueryData_allocate(maxNumVehicles, maxNumWheelsPerVehicle, maxNumHitPointsPerWheel, numVehiclesInBatch, preFilterShader, postFilterShader, PxAllocatorCallback.getCPtr(allocator));
    VehicleSceneQueryData ret = (cPtr == global::System.IntPtr.Zero) ? null : new VehicleSceneQueryData(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void free(PxAllocatorCallback allocator) {
    NativePINVOKE.VehicleSceneQueryData_free(swigCPtr, PxAllocatorCallback.getCPtr(allocator));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static PxBatchQuery setUpBatchedSceneQuery(uint batchId, VehicleSceneQueryData vehicleSceneQueryData, PxScene scene) {
    global::System.IntPtr cPtr = NativePINVOKE.VehicleSceneQueryData_setUpBatchedSceneQuery(batchId, VehicleSceneQueryData.getCPtr(vehicleSceneQueryData), PxScene.getCPtr(scene));
    PxBatchQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxBatchQuery(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public System.IntPtr getRaycastQueryResultBuffer(uint batchId) {
    var ret = NativePINVOKE.VehicleSceneQueryData_getRaycastQueryResultBuffer(swigCPtr, batchId);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public PxSweepQueryResult getSweepQueryResultBuffer(uint batchId) {
    global::System.IntPtr cPtr = NativePINVOKE.VehicleSceneQueryData_getSweepQueryResultBuffer(swigCPtr, batchId);
    PxSweepQueryResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxSweepQueryResult(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getQueryResultBufferSize() {
    uint ret = NativePINVOKE.VehicleSceneQueryData_getQueryResultBufferSize(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
