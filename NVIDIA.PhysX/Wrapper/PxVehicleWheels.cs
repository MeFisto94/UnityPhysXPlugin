//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxVehicleWheels : PxBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxVehicleWheels(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxVehicleWheels_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxVehicleWheels obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxVehicleWheels getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxVehicleWheels)) {
          wrapper = new PxVehicleWheels(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxVehicleWheels;
  }

  public uint getVehicleType() {
    uint ret = NativePINVOKE.PxVehicleWheels_getVehicleType(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxRigidDynamic getRigidDynamicActor() {
    global::System.IntPtr cPtr = NativePINVOKE.PxVehicleWheels_getRigidDynamicActor(swigCPtr);
    PxRigidDynamic ret = (cPtr == global::System.IntPtr.Zero) ? null : PxRigidDynamic.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float computeForwardSpeed() {
    float ret = NativePINVOKE.PxVehicleWheels_computeForwardSpeed(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float computeSidewaysSpeed() {
    float ret = NativePINVOKE.PxVehicleWheels_computeSidewaysSpeed(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxVehicleWheelsSimData mWheelsSimData {
    set {
      NativePINVOKE.PxVehicleWheels_mWheelsSimData_set(swigCPtr, PxVehicleWheelsSimData.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxVehicleWheels_mWheelsSimData_get(swigCPtr);
      PxVehicleWheelsSimData ret = (cPtr == global::System.IntPtr.Zero) ? null : PxVehicleWheelsSimData.getWrapper(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxVehicleWheelsDynData mWheelsDynData {
    set {
      NativePINVOKE.PxVehicleWheels_mWheelsDynData_set(swigCPtr, PxVehicleWheelsDynData.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxVehicleWheels_mWheelsDynData_get(swigCPtr);
      PxVehicleWheelsDynData ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxVehicleWheelsDynData(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
